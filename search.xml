<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[【HAS】DASH库libdash代码结构解析]]></title>
      <url>http://yoursite.com/2017/03/04/002/</url>
      <content type="html"><![CDATA[<p><strong>libdash</strong>是bitmovin公司开源的一个DASH库，完整实现了DASH协议，可以在<a href="https://github.com/bitmovin/libdash" target="_blank" rel="external">Github</a>上获取其代码。同时，该开源库还基于QT开发了一个播放器，之前做DASH自适应算法的时候，在该实例播放器上实现过算法，也对该播放器的代码结构较为熟悉，特记录下来，本文将主要针对设计自适应算法部分的代码。</p>
<a id="more"></a>
<h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p><img src="http://oe1w1bbwt.bkt.clouddn.com/blog/libdash/libdash.png" alt="enter image description here"></p>
<h3 id="每一个类的作用"><a href="#每一个类的作用" class="headerlink" title="每一个类的作用"></a>每一个类的作用</h3><h4 id="1-DASHPlayer"><a href="#1-DASHPlayer" class="headerlink" title="1. DASHPlayer"></a>1. DASHPlayer</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> DASHPlayer : <span class="keyword">public</span> IDASHPlayerGuiObserver, <span class="keyword">public</span> managers::IMultimediaManagerObserver</div></pre></td></tr></table></figure>
<p>这个sample player用的最多的一种设计模式就是观察者模式，可以看到几乎下面每一个类都是继承了几个观察者类，通过观察者这种形式，来获取其包含的类的状态信息，包括下载状态、buffer状态以及播放器按钮等。DASHPlayer继承了IDASHPlayerGuiObserver和IMultimediaManagerObserver，其将观察DASHPlayerGui和MultimediaManager两个类的状态，分别对应着下面两组函数。同时，DASHPlayer主要的两个包含的类就是QtSamplePlayerGui和MultimediaManager，前者负责QT界面的功能，后者负责媒体的下载和播放。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnSettingsChanged</span>      <span class="params">(<span class="keyword">int</span> period, <span class="keyword">int</span> videoAdaptationSet, <span class="keyword">int</span> videoRepresentation, <span class="keyword">int</span> audioAdaptationSet, <span class="keyword">int</span> audioRepresentation)</span></span>;</div><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnStartButtonPressed</span>   <span class="params">(<span class="keyword">int</span> period, <span class="keyword">int</span> videoAdaptationSet, <span class="keyword">int</span> videoRepresentation, <span class="keyword">int</span> audioAdaptationSet, <span class="keyword">int</span> audioRepresentation)</span></span>;</div><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnStopButtonPressed</span>    <span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnDownloadMPDPressed</span>   <span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;url)</span></span>;</div></pre></td></tr></table></figure>
<p>当QT界面的DownloadMPD按钮按下的话，将执行该函数里的内容，其余的类似，分别是Start, Stop, Setting所对应的功能。下面简单介绍一下，OnDownloadMPDPressed函数的功能，</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> DASHPlayer::OnDownloadMPDPressed               (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;url)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>-&gt;multimediaManager-&gt;Init(url))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;gui-&gt;SetStatusBar(<span class="string">"Error parsing mpd at: "</span> + url);</div><div class="line">        <span class="keyword">return</span>; <span class="comment">// TODO dialog or symbol that indicates that error</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>-&gt;SetSettings(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">this</span>-&gt;gui-&gt;SetStatusBar(<span class="string">"Successfully parsed MPD at: "</span> + url);</div><div class="line">    <span class="keyword">this</span>-&gt;gui-&gt;SetGuiFields(<span class="keyword">this</span>-&gt;multimediaManager-&gt;GetMPD());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，会初始化multimediaManager中的相关内容，其中就包括mpd的下载等，另外，会对QT界面gui进行一些设置，改变按钮的状态之类的。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* IMultimediaManagerObserver */</span></div><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnVideoBufferStateChanged</span>          <span class="params">(<span class="keyword">uint32_t</span> fillstateInPercent)</span></span>;</div><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnVideoSegmentBufferStateChanged</span>   <span class="params">(<span class="keyword">uint32_t</span> fillstateInPercent)</span></span>;</div><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnAudioBufferStateChanged</span>          <span class="params">(<span class="keyword">uint32_t</span> fillstateInPercent)</span></span>;</div><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnAudioSegmentBufferStateChanged</span>   <span class="params">(<span class="keyword">uint32_t</span> fillstateInPercent)</span></span>;</div></pre></td></tr></table></figure>
<p>这几个函数，负责监视MultimediaManager的状态，相应的状态发生改变时，会执行其中的函数，主要是设计到QT界面上关于buffer部分的显示等。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span>    <span class="title">SettingsChanged</span> <span class="params">(<span class="keyword">int</span> period, <span class="keyword">int</span> videoAdaptationSet, <span class="keyword">int</span> videoRepresentation, <span class="keyword">int</span> audioAdaptationSet, <span class="keyword">int</span> audioRepresentation)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span>    <span class="title">SetSettings</span>     <span class="params">(<span class="keyword">int</span> period, <span class="keyword">int</span> videoAdaptationSet, <span class="keyword">int</span> videoRepresentation, <span class="keyword">int</span> audioAdaptationSet, <span class="keyword">int</span> audioRepresentation)</span></span>;</div></pre></td></tr></table></figure>
<p>DASHPlayer也可以更改将要下载的视频的质量，主要是上面两个函数来实现的，其主要是为了实现通过QT界面来调节的功能，但是，自适应算法最好不要在这里实现，太顶层了，而且，整个代码结构一直都是通过观察者传递，传到这一层会经过很多的类，写起来很麻烦。</p>
<h4 id="2-MultimediaManager"><a href="#2-MultimediaManager" class="headerlink" title="2. MultimediaManager"></a>2. MultimediaManager</h4><p><code>MultimediaManager</code>的功能比较强大，负责三个方面：<br><strong>一，负责下载音视频片段，</strong>主要的类是<code>MultimediaStream</code>,针对每一个视频流或者音频流都会创建一个<code>MultimediaStream</code>，所以，具体自适应逻辑应该作用在在<code>MultimediaStream</code>中。这一部分的介绍，将放在下一章节里讲述。</p>
<p><strong>二，负责音视频的渲染，</strong>有两个创建音频和视频渲染线程的函数如下，其主要是调用了ffmpeg的类库，</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Threads for Rendering Audio &amp; Video */</span></div><div class="line"><span class="function"><span class="keyword">bool</span>            <span class="title">StartVideoRenderingThread</span>   <span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span>            <span class="title">StopVideoRenderingThread</span>    <span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>*    <span class="title">RenderVideo</span>                 <span class="params">(<span class="keyword">void</span> *data)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span>            <span class="title">StartAudioRenderingThread</span>   <span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span>            <span class="title">StopAudioRenderingThread</span>    <span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>*    <span class="title">RenderAudio</span>                 <span class="params">(<span class="keyword">void</span> *data)</span></span>;</div></pre></td></tr></table></figure>
<p>可以看一下，RenderVideo这个函数的内容，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span>*   MultimediaManager::RenderVideo        (<span class="keyword">void</span> *data)</div><div class="line">&#123;</div><div class="line">    MultimediaManager *manager = (MultimediaManager*) data;</div><div class="line"></div><div class="line">    QImage *frame = manager-&gt;videoStream-&gt;GetFrame();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(manager-&gt;isVideoRendering)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (frame)</div><div class="line">        &#123;</div><div class="line">            manager-&gt;videoElement-&gt;SetImage(frame);</div><div class="line">            manager-&gt;videoElement-&gt;update();</div><div class="line"></div><div class="line">            manager-&gt;framesDisplayed++;</div><div class="line"></div><div class="line">            PortableSleep(<span class="number">1</span> / manager-&gt;frameRate);</div><div class="line"></div><div class="line">            <span class="keyword">delete</span>(frame);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        frame = manager-&gt;videoStream-&gt;GetFrame();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此处一定要分清manager是 MultimediaManager本身，而不是DASHManger，可以参考第一行代码，<code>MultimediaManager *manager = (MultimediaManager*) data;</code>，<br>可以看到，manager存在两个成员变量，<code>manager-&gt;videoElement-&gt;update();</code>， videoElement负责更新每一帧图像，<code>manager-&gt;videoStream-&gt;GetFrame();</code>， videoStream负责获取下一帧图像。</p>
<p><strong>三、负责自适应逻辑的设置和调整</strong>，具体相关的函数如下，</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span>    MultimediaManager::InitVideoRendering               (<span class="keyword">uint32_t</span> offset)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;videoLogic = AdaptationLogicFactory::Create(libdash::framework::adaptation::Manual, <span class="keyword">this</span>-&gt;mpd, <span class="keyword">this</span>-&gt;period, <span class="keyword">this</span>-&gt;videoAdaptationSet);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>-&gt;videoStream = <span class="keyword">new</span> MultimediaStream(sampleplayer::managers::VIDEO, <span class="keyword">this</span>-&gt;mpd, SEGMENTBUFFER_SIZE, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">this</span>-&gt;videoStream-&gt;AttachStreamObserver(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>-&gt;videoStream-&gt;SetRepresentation(<span class="keyword">this</span>-&gt;period, <span class="keyword">this</span>-&gt;videoAdaptationSet, <span class="keyword">this</span>-&gt;videoRepresentation);</div><div class="line">    <span class="keyword">this</span>-&gt;videoStream-&gt;SetPosition(offset);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在初始化的时候，就设置了自适应逻辑，只要修改<code>libdash::framework::adaptation::Manual</code>的值，即可通过简单工厂模式，选择不同的自适应逻辑。目前库里自带的逻辑都是最简单的实例性质的。<br>如果在运行中修改自适应逻辑的话，可以根据下面两个函数，当然现在都没有具体的实现，可以参考上边的创建来实例化一个自适应逻辑并赋值给<code>videoLogic</code>即可。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SetVideoAdaptationLogic</span>    <span class="params">(libdash::framework::adaptation::LogicType type)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SetAudioAdaptationLogic</span>    <span class="params">(libdash::framework::adaptation::LogicType type)</span></span>;</div></pre></td></tr></table></figure></p>
<h4 id="3-MultimediaStream"><a href="#3-MultimediaStream" class="headerlink" title="3. MultimediaStream"></a>3. MultimediaStream</h4><p>该类负责一路音频或者视频流，主要的功能有两个方面，</p>
<p><strong>一、负责控制下载或者暂停</strong>，主要函数如下，具体就是控制<code>DASHManger</code>来实现，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span>        MultimediaStream::StartDownload             ()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!dashManager-&gt;Start())</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span>        MultimediaStream::StopDownload              ()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;dashManager-&gt;Stop();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>二、存储解码好的视频帧，并负责交给上层<code>MultimediaManger</code>渲染，涉及到的代码如下，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">libdash::framework::buffer::Buffer&lt;QImage&gt;          *frameBuffer;</div><div class="line">libdash::framework::buffer::Buffer&lt;libdash::framework::buffer::AudioChunk&gt; *sampleBuffer;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>        <span class="title">AddFrame</span>                <span class="params">(QImage *frame)</span></span>;</div><div class="line"><span class="function">QImage*     <span class="title">GetFrame</span>                <span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<h4 id="4-DASHManger"><a href="#4-DASHManger" class="headerlink" title="4. DASHManger"></a>4. DASHManger</h4><p><code>DASHManger</code>具体控制下载和解码，主要的成员有，</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">buffer::MediaObjectBuffer   *buffer;</div><div class="line">MediaObjectDecoder          *mediaObjectDecoder;</div><div class="line">DASHReceiver                *receiver;</div></pre></td></tr></table></figure>
<p>其中<code>DASHReceiver</code>获取到的MediaObject会被放在<code>buffer</code>中，<code>MediaObjectDecoder</code>负责解码<code>buffer</code>中的数据，并放到上边那个类的frameBuffer中。</p>
<h4 id="5-DASHReceiver"><a href="#5-DASHReceiver" class="headerlink" title="5. DASHReceiver"></a>5. DASHReceiver</h4><p>这个类，涉及到下载的最顶层的内容，主要看<code>doBuffering</code>这个线程，里边涉及到每一个块的下载，故而，<strong>可以在此处计算下载每一个块所用的时间</strong>，然后，就可以估计网络状态，是个很重要的变量，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Thread that does the buffering of segments */</span></div><div class="line"><span class="keyword">void</span>*                       DASHReceiver::DoBuffering               (<span class="keyword">void</span> *receiver)</div><div class="line">&#123;</div><div class="line">    DASHReceiver *dashReceiver = (DASHReceiver *) receiver;</div><div class="line"></div><div class="line">    dashReceiver-&gt;DownloadInitSegment(dashReceiver-&gt;GetRepresentation());</div><div class="line"></div><div class="line">    MediaObject *media = dashReceiver-&gt;GetNextSegment();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(media != <span class="literal">NULL</span> &amp;&amp; dashReceiver-&gt;isBuffering)</div><div class="line">    &#123;</div><div class="line">        media-&gt;StartDownload();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!dashReceiver-&gt;buffer-&gt;PushBack(media))</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">        media-&gt;WaitFinished();</div><div class="line"></div><div class="line">        dashReceiver-&gt;NotifySegmentDownloaded();</div><div class="line"></div><div class="line">        media = dashReceiver-&gt;GetNextSegment();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dashReceiver-&gt;buffer-&gt;SetEOS(<span class="literal">true</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此处，涉及到自适应逻辑的每一个类都讲过了，那么，自适应逻辑该加在什么地方呢？其实可以加的地方还是蛮多的，而且，对性能影响也不大，如果设计的是，每下载完一个segment做一次逻辑的话，可以放在<code>OnSegmentDownloaded</code>这个函数里，我是将逻辑放在<code>MultimediaManger</code>中的，因为涉及到音频流和视频流，要做一次流判断，可以在<code>MultimediaManger</code>的<code>OnSegmentDownloaded</code>中如下添加代码，</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span>    MultimediaManager::OnSegmentDownloaded              (StreamType type, <span class="keyword">double</span> current_bandwidth)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;segmentsDownloaded++;</div><div class="line"></div><div class="line">    estimate_bandwidth.push_back(current_bandwidth);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (type)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> AUDIO:</div><div class="line">            <span class="keyword">this</span>-&gt;audioLogic-&gt;EstimateBandwidth(estimate_bandwidth);</div><div class="line">            <span class="keyword">this</span>-&gt;audioLogic-&gt;DoLogic();</div><div class="line">            <span class="keyword">this</span>-&gt;SetAudioQuality(<span class="keyword">this</span>-&gt;period, <span class="keyword">this</span>-&gt;audioLogic-&gt;GetAdaptationSet(), <span class="keyword">this</span>-&gt;audioLogic-&gt;GetRepresentation());</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> VIDEO:</div><div class="line">            <span class="keyword">this</span>-&gt;videoLogic-&gt;EstimateBandwidth(estimate_bandwidth);</div><div class="line">            <span class="keyword">this</span>-&gt;videoLogic-&gt;DoLogic();</div><div class="line">            <span class="keyword">this</span>-&gt;SetVideoQuality(<span class="keyword">this</span>-&gt;period, <span class="keyword">this</span>-&gt;videoLogic-&gt;GetAdaptationSet(), <span class="keyword">this</span>-&gt;videoLogic-&gt;GetRepresentation());</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我在自己的<a href="https://github.com/NiceTony/libdash.git" target="_blank" rel="external">Github</a>仓库里，大概把该有的内容都添加进来了，只需要在逻辑类做相应的实现即可，现在逻辑类可以获取的参数有，buffer的状态以及预测带宽，这两块的具体实现以及自适应算法的实现都很有意义，欢迎大家一起来研究讨论这些问题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【生活感悟】Github博客一些常用操作]]></title>
      <url>http://yoursite.com/2017/01/11/003/</url>
      <content type="html"><![CDATA[<p>之前还一直觉得自己在别的平台上发布博客要方便些，自己要管理的话比较麻烦，好久没有写博客，今晚写了一篇博客之后，发现其实并没有那么复杂。之前还担心环境迁移的问题，现在也成功解决了，所以决定以后就在自己的空间来更新博客了，满满的Geek范，主要是还没有广告。这边文章主要记录一些更新博客中常用的操作，供今后更新时候查阅。</p>
<a id="more"></a>
<h2 id="迁移环境"><a href="#迁移环境" class="headerlink" title="迁移环境"></a>迁移环境</h2><p>本篇文章不涉及到如何在GitHub上搭建个人博客，如果需要的话可以参考教程<a href="http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/" target="_blank" rel="external">吴小龙的博客</a>，这里只涉及到建好之后的一些常用操作。</p>
<p>GitHub博客是有一堆开发文件的，包括主题了之类的，迁移的话，可以简单的把所有范文件复制到新的电脑上就可以了，不过需要在新的电脑上也配置一下Hexo环境，这个部分在上面推荐的博客里有。</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><pre><code>hexo help #查看帮助
hexo init #初始化一个目录
hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成网页，可以在 public 目录查看整个网站的文件
hexo server #本地预览，&apos;Ctrl+C&apos;关闭
hexo deploy #部署.deploy目录
hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**
</code></pre><p>有几个操作可以简化为</p>
<pre><code>hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy
</code></pre><p>编辑文章的话直接在<code>source/_posts</code>对应的文件里修改就好了，其他几个页面的话，也在相应的目录下的文件里修改即可。</p>
<p>如果要生成一个新的Page，用上边的新建页面命令就好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【生活感悟】在创业公司实习的这20天]]></title>
      <url>http://yoursite.com/2017/01/11/004/</url>
      <content type="html"><![CDATA[<p>从2016-12-19号开始去师兄的公司实习，当时师兄和导师征求了下意见，老师说我没有问题的话就可以过去，然后我就开始了在师兄公司的实习经历，算是自己职业生涯中第一份履历了，最近也颇有一些感悟，所以记录下来。</p>
<a id="more"></a>
<h2 id="一些基本的事情"><a href="#一些基本的事情" class="headerlink" title="一些基本的事情"></a>一些基本的事情</h2><p>从北大到公司需要一个小时，早上理论上需要9:30到公司，开始我都是9点多点儿到，后来越来越晚，现在经常10点到的情况也是有的。公司在中关村东升科技园，东升科技园应该算是科技创新企业集中的园区，我们所在的泰利驿站算是初创企业的集中营，里边零零散散的分布着很多的公司，公司在泰利驿站里占据着西北角，现在大概有9个工位的样子，公司有4名核心技术人员，3名实习生，和两名负责市场的师姐。在公司吃饭是有一些贵的，大概在15-20之间，总体要比在学校吃贵80%的样子。在公司我终于坐上了喜欢的工位，要是在实验室也有这么宽敞的工位就好了。</p>
<p><img src="http://oe1w1bbwt.bkt.clouddn.com/20170111/QQ%E5%9B%BE%E7%89%8720170111222834.jpg" alt=""></p>
<p>右边的摄像头就是我们公司的产品了，全景的摄像机，主要是有两位小米过来的硬件工程师设计开发的，再配合上公司的软件，就可以实现全景视频的系统了。我在公司主要是参与软件部分的维护，以及一些公司网站的事情。</p>
<h2 id="实习的感受"><a href="#实习的感受" class="headerlink" title="实习的感受"></a>实习的感受</h2><p>首先，公司的氛围的话，还是蛮不错的，平时交流不多，大家都有自己负责的部分，各忙各的。工作的大环境稍微有些吵，隔壁好像是做企业网络办公产品的，经常讨论些网页、excel之类的，氛围跟我们完全不一样，他们的老大好像也是北大毕业的，经常给其他人分配任务，甚至教大家如何实现git之类的事情，感觉比我们low多了。</p>
<p>然后，手头上的事情话，今天刚刚解决了一个推流的小bug，算是在公司达成的第一个小成就。其他部分就是从过来就开始准备实现的，给我们的系统增加音频部分，还有很多的路要走，准备先在自己的小系统上实现一下，移植过去应该要简单些，以前并没有接触过类似的工作。感觉今后还可以慢慢的给自己的小系统增加功能，可以增加一些物体检测之类的算法，不断的砌砖，以后开源出来供初学者学习也很不错。</p>
<p>公司的娱乐活动的话不多，大家最常做的娱乐活动就是天气好的话，午饭以后一起在园区里散散步，吹吹风（寒风），畅想畅想公司的未来。不过，圣诞的时候，大家一起在师兄家嗨皮了一把，玩德州扑克第一个把所有筹码输光，感受了一把xbox，还是蛮不错的，听beast+的蓝牙音箱，玩了很久的只言片语，还是蛮开心的。</p>
<p><img src="http://oe1w1bbwt.bkt.clouddn.com/20170111/QQ%E5%9B%BE%E7%89%8720170111222821.jpg" alt=""></p>
<p>最近的生活状态呢，基本上属于按时打卡型的，早上9点多到，晚上7点多回来，在学校的学五食堂吃吃晚饭，回宿舍充充电（学些机器学习入门的东西），很轻松，慢慢的也适应了这种生活，刚刚开始的时候还觉得超级累呢，而其每天挤公交都觉得生活特别无望，现在慢慢的都习惯了，感觉最近成熟了很多。</p>
<h2 id="写在最后的话"><a href="#写在最后的话" class="headerlink" title="写在最后的话"></a>写在最后的话</h2><p>2017年也开始一周多了，这一年注定要发生很多的大事，做出一些重要的决定，是不是要出国或者留在学校读博士呢，能不能转到一个合适的研究方向上去呢，能不能找到一个称心如意的女朋友呢，甚至，可不可以找到一份好的工作呢。不过每一个都特别期待，也相信生活会很美好的，2017以来，开心起来，拥抱未来。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HAS】HTTP Adaptive Streaming研究热点总结]]></title>
      <url>http://yoursite.com/2016/10/15/research%20point%20on%20HAS/</url>
      <content type="html"><![CDATA[<p>HAS的初衷就是为了提高用户观看视频的体验，充分利用带宽状况来提供质量更好的视频。所以，关于HAS的研究以及部署，也都是围绕着提高用户的QoE(quality of experience)来做。总结下来有以下3个的研究方向：<strong>服务器</strong>、<strong>网络</strong>、<strong>客户端</strong>。下面就从这3个方面做详细的介绍。<br><a id="more"></a></p>
<h2 id="Part-1-服务器端"><a href="#Part-1-服务器端" class="headerlink" title="Part 1: 服务器端"></a>Part 1: 服务器端</h2><hr>
<p>服务器作为视频内容提供环节，主要是涉及到视频内容准备的过程，包括以下几个方面。</p>
<h3 id="one-layer-or-multi-layer-coding（单层-or-多层编码）"><a href="#one-layer-or-multi-layer-coding（单层-or-多层编码）" class="headerlink" title="one-layer or multi-layer coding（单层 or 多层编码）"></a>one-layer or multi-layer coding（单层 or 多层编码）</h3><p>HAS提供不同码率的实现方式也很多样，</p>
<ul>
<li>一是one-layer coding，就是通过调节编码参数来获取不同码率的视频，这种实现方式比较常见。</li>
<li>二是multi-layer coding，这种实现是借助了SVC(scalable video coding)多层编码的特性。</li>
</ul>
<p>one-layer coding的适应算法在下面会有详解，此处简单介绍下DASH-SVC方案。<br>SVC（scalable video coding）可以提供一个<strong>base layer</strong>和一个或多个<strong>enhance layer</strong>，其适应算法有以下经验，</p>
<ul>
<li>首先保证了base layer的传输就保证了视频的流畅播放，如果带宽状况允许的话，再请求enhance layer来提高视频的质量</li>
<li>base layer improving is more import than higher quality layers（提升基本层优于提升增强层）</li>
<li>higher quality in the end of a video clip leads to higher QoE</li>
</ul>
<h3 id="preparation-of-the-content（视频内容呈现方式）"><a href="#preparation-of-the-content（视频内容呈现方式）" class="headerlink" title="preparation of the content（视频内容呈现方式）"></a>preparation of the content（视频内容呈现方式）</h3><p>视频内容呈现方式包括以下研究点，</p>
<blockquote>
<p>segment length（1s - 15s)</p>
</blockquote>
<ul>
<li><strong>large segment</strong>的话可以提高编码的效率，相同的bit rate可以提供质量更好的视频。</li>
<li>但是，<strong>large segment</strong>会增加播放延迟、更长的初始化时间、对带宽播放反应滞后。</li>
<li>对于直播，由于要求低延迟，一定要用<strong>small segment</strong>（延迟随segment size直线下降，130ms的segment可以获得1s左右的延迟）</li>
<li>当然，segment size的下降必然会增加HTTP请求，增加了额外的网络负担。</li>
</ul>
<blockquote>
<p>available bit rate</p>
</blockquote>
<ul>
<li>太过多的bit rate必定会增加编码耗时以及服务器存储负担（点播）</li>
<li>典型的实现方式（Youtube）是<strong>5种</strong>bit rate</li>
</ul>
<h3 id="adaptation-dimension-多码率实现方式"><a href="#adaptation-dimension-多码率实现方式" class="headerlink" title="adaptation dimension(多码率实现方式)"></a>adaptation dimension(多码率实现方式)</h3><p>在视频编码中可以通过以下三个维度来实现编码视频码率的下降，frame rate、resolution、QP，这一部分和视频编码中QoE和bit rate的研究完全一致，简单介绍如下，</p>
<blockquote>
<p>temporal adaptation: frame rate</p>
</blockquote>
<ul>
<li>in order to achieve 80% of original bitrate, need to reduce 60% frame rate. quality degradation is significant.</li>
<li>reduction of frame rate has little impact on high motion videos.</li>
</ul>
<blockquote>
<p>spatial adaptation: resolution</p>
</blockquote>
<ul>
<li>spatial resolution is the key criteration for QoE for small screen</li>
<li>impact of resolution depends mainly on the content and the device</li>
<li>for the same video bit rate, higher resolution is perceived worse</li>
</ul>
<blockquote>
<p>image quality adaptation: QP</p>
</blockquote>
<ul>
<li>decrease bit rate by 30% without any loss in quality(paper:Optimizing video coding adaptive streaming over HTTP)</li>
<li>increasing bit rate the video quality increases but eventually saturates.</li>
</ul>
<blockquote>
<p>multiple dimensions</p>
</blockquote>
<ul>
<li>通过以上多个参数配合来调节bit rate</li>
<li>there exists an encoding which maximizes the user-perceived quality for a given target bit rate.（paper: User perception of adaptive video quality)</li>
<li>fast foreground motion like soccer reducing frame is preferred to reducing frame quality</li>
</ul>
<h2 id="Part-2-网络"><a href="#Part-2-网络" class="headerlink" title="Part 2: 网络"></a>Part 2: 网络</h2><hr>
<p>网络这个层次上的研究包含两个大的方面，<strong>网络层次的适应算法</strong>、<strong>网络带宽竞争机制</strong>。<br><strong>网络层次的适应算法</strong>,指在网络上重定向客户端的bit rate请求，来获取一个整体的QoE提升。<br><strong>网络带宽竞争机制</strong>包括多个播放器竞争的公平机制以及播放器和其他上网应用之间的竞争。</p>
<h3 id="Interactions-between-network-entities"><a href="#Interactions-between-network-entities" class="headerlink" title="Interactions between network entities"></a>Interactions between network entities</h3><p>本节涉及到较多了TCP传输协议知识，现在并不能很好的理解。</p>
<blockquote>
<p>Interactions between HAS Players</p>
</blockquote>
<p>对于同一个网络中存在多个播放器的情况，有以下三个方面的问题需要考虑，stability、fairness and bandwidth utilization</p>
<ul>
<li>播放器之间能否分享网络，并维持一个稳定的状态（没有太多的码率切换）？</li>
<li>播放器之间能否公平的分享网络带宽？</li>
<li>多个播放器的竞争会不会降低网络带宽的利用率？</li>
</ul>
<blockquote>
<p>Interactions between HAS Players and other applications</p>
</blockquote>
<p>这一方面的研究不足。</p>
<blockquote>
<p>Interactions between other applications and HAS Players</p>
</blockquote>
<p>aggressive player对其他上网应用的影响，</p>
<ul>
<li>由于有很多的HTTP request of small files，会导致排队时间增长，严重影响大文件的传输以及实时的应用。</li>
</ul>
<blockquote>
<p>Interactions between HAS Players and TCP</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>上一节介绍了由于竞争网络带宽带来的一些问题，本节就来介绍一些解决方案，存在以下三个方面的解决方案，</p>
<blockquote>
<p>server based approaches</p>
</blockquote>
<p>后续补充。</p>
<blockquote>
<p>network based approaches</p>
</blockquote>
<p><strong>SDN</strong>(software defined network)可以重定向HAS请求，基于此可以做一些网络上的适应算法。</p>
<blockquote>
<p>proxy and client based approaches</p>
</blockquote>
<p>通过一个上层的proxy server来分配带宽，或者，让多个client之间互相通信，了解对方的带宽状况，从而解决上一节遇到的问题。</p>
<h2 id="Part-3-客户端"><a href="#Part-3-客户端" class="headerlink" title="Part 3: 客户端"></a>Part 3: 客户端</h2><hr>
<p>客户端涉及到<strong>adaptation algo.</strong>，这一块MPEG-DASH标准并没有做规定，所以在这块的研究也最为火热，这一块的研究可以分为影响QoE的因素和参与adaptation algo.的参数两个方面进行分解。</p>
<h3 id="影响QoE的因素"><a href="#影响QoE的因素" class="headerlink" title="影响QoE的因素"></a>影响QoE的因素</h3><p>影响QoE的因素包括<strong>init delay</strong>、<strong>representation switch events</strong>、<strong>stalling</strong>、<strong>media throughput</strong>、<strong>network utilisation</strong>等几个因素，研究多是针对前三个因素，后边两个因素常用作评价标准，在优化前三个因素的基础上，最大化后边2个因素是自适应码率算法的追求目标。</p>
<blockquote>
<p>init delay</p>
</blockquote>
<ul>
<li>跟segment size &amp; init buffer直接相关</li>
<li>小的init buffer可以降低init delay，但是会增加播放后stalling的可能性</li>
<li>playout buffer可以抵消临时的带宽波动，使得播放更加平滑</li>
<li>the impact of init delays on QoE of video streaming is not severe.</li>
</ul>
<blockquote>
<p>representation switch events</p>
</blockquote>
<ul>
<li>降低视频质量的影响比提升视频质量的影响大，有研究表明，<strong>突然提高视频质量反而会提升QoE</strong>，因为用户更愿意看到视频质量提升。（paper: Representation switch smoothing for adaptive HTTP streaming）</li>
<li>逐渐切换可以降低切换对QoE的影响，switching amplitude and recency effects can be neglected if more than two switches occur</li>
<li><strong>相对于切换频率，长时间播放低质量视频会更加影响QoE</strong>（Assessing  effect sizes of influence factors towards a QoE model for HTTP adaptive streaming)</li>
</ul>
<blockquote>
<p>stalling</p>
</blockquote>
<ul>
<li>large buffer: 需要更多的内存（对于移动设备不合适） &amp; 更长的初始化等待</li>
</ul>
<h3 id="parameters-of-adaptation-algo"><a href="#parameters-of-adaptation-algo" class="headerlink" title="parameters of adaptation algo."></a>parameters of adaptation algo.</h3><p>当前常见的算法多采用如下几个系统参数来作为adaptation algo.的输入参数，<strong>预测带宽</strong>、<strong>video buffer size</strong>等。下面结合多种adaptation algo.来介绍这几个参数的运用，</p>
<blockquote>
<p>bandwidth estimation algo.</p>
</blockquote>
<ul>
<li>（paper: Review of bandwidth estimation tools and application to bandwidth adaptive video streaming)</li>
<li>可以分为passive &amp; active measurement两种预测方式，active measurement需要额外的probe packet，HAS多是采用passive的方式</li>
</ul>
<blockquote>
<p>adaptation algo.</p>
</blockquote>
<p>具体的adaptation algo.以后会分专题讲解，此文只讲一些概括性的东西。由于其发展的很快，所以我都是重点关注些最新的算法。</p>
<ul>
<li>Pipelined DASH: several segment can be requested at a time</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>国庆假期看了些关于HAS领域概括性的文章，特将研究热点总结出来，供交流讨论及自己以后翻看。</p>
]]></content>
    </entry>
    
  
  
</search>
